(()=>{"use strict";var n={669:(n,e,t)=>{t.d(e,{Z:()=>m});var r=t(15),o=t.n(r),i=t(645),A=t.n(i),s=t(667),a=t.n(s),c=t(136),l=A()(o()),d=a()(c);l.push([n.id,".news {\n    padding: 0 1rem;\n    flex: 1;\n}\n\n.news .news__placeholder {\n    text-transform: uppercase;\n    color: #a2a2a2;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n\n    font-size: 5rem;\n    padding: 4rem 0;\n    height: 100%;\n    text-align: center;\n    transition: 0.5s;\n}\n.arrow__up {\n    /* fill: #0097e2; */\n    fill: #a2a2a2;\n    width: 10rem;\n    height: 10rem;\n    animation: placeholder_anim 3s infinite;\n}\n\n@keyframes placeholder_anim {\n    0% {\n        transform: translateY(0);\n    }\n    65% {\n        transform: translateY(0);\n    }\n    70% {\n        transform: translateY(-3rem);\n    }\n    100% {\n        transform: translateY(0);\n    }\n}\n@media screen and (max-width: 460px) {\n    .news .news__placeholder {\n        padding: 1rem 0;\n        font-size: 2rem;\n    }\n}\n.news__item {\n    display: flex;\n    flex-direction: column;\n    margin: 1rem auto;\n    margin-bottom: 1.6%;\n    background: #f5f5f5;\n    color: #333;\n    line-height: 1.4;\n    font-family: Arial, sans-serif;\n    border-radius: 5px;\n    overflow: hidden;\n}\n\n.news__item:hover .news__meta-photo {\n    transform: scale(1.3) rotate(3deg);\n}\n\n.news__item .news__meta {\n    position: relative;\n    height: 200px;\n}\n\n.news__item .news__meta-photo {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-image: url("+d+");\n    background-size: cover;\n    background-position: center;\n    transition: transform 0.2s;\n}\n.news__meta-photo img {\n    object-fit: cover;\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n    margin: auto;\n    padding: 0;\n    list-style: none;\n}\n\n.news__item .news__meta-details {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: -120%;\n    margin: auto;\n    transition: left 0.2s;\n    background: rgba(0, 0, 0, 0.6);\n    color: #fff;\n    padding: 10px;\n    width: 100%;\n    font-size: 0.9rem;\n}\n\n.news__item .news__description {\n    padding: 1.5rem;\n    background: #d9d9d9;\n    position: relative;\n    z-index: 1;\n}\n\n.news__item .news__description h2 {\n    line-height: 1;\n    margin: 0;\n    font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n    font-size: 1rem;\n    font-weight: 300;\n    text-transform: uppercase;\n    color: #a2a2a2;\n    margin-top: 5px;\n}\n\n.news__item .news__description .news__read-more {\n    text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n    color: #f16110;\n    display: inline-block;\n    position: relative;\n    text-decoration: none;\n    font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n    content: '→';\n    margin-left: -10px;\n    opacity: 0;\n    vertical-align: middle;\n    transition: margin 0.3s, opacity 0.3s;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n    margin-left: 5px;\n    opacity: 1;\n}\n\n.news__item p {\n    margin: 1rem 0 0;\n}\n\n.news__item p:first-of-type {\n    margin-top: 1.25rem;\n    position: relative;\n}\n\n.news__item p:first-of-type:before {\n    content: '';\n    position: absolute;\n    height: 5px;\n    background: #f16110;\n    width: 35px;\n    top: -0.75rem;\n    border-radius: 3px;\n}\n\n.news__item:hover .news__meta-details {\n    left: 0%;\n}\n\n@media (min-width: 640px) {\n    .news__item {\n        flex-direction: row;\n        max-width: 700px;\n    }\n\n    .news__item .news__meta {\n        flex-basis: 40%;\n        height: auto;\n    }\n\n    .news__item .news__description {\n        flex-basis: 60%;\n    }\n\n    .news__item .news__description:before {\n        -webkit-transform: skewX(-3deg);\n        transform: skewX(-3deg);\n        content: '';\n        background: #f5f5f5;\n        width: 24px;\n        position: absolute;\n        left: -10px;\n        top: 0;\n        bottom: 0;\n        z-index: -1;\n    }\n\n    .news__item.alt {\n        flex-direction: row-reverse;\n    }\n\n    .news__item.alt .news__description:before {\n        left: inherit;\n        right: -10px;\n        -webkit-transform: skew(3deg);\n        transform: skew(3deg);\n    }\n\n    .news__item.alt .news__meta-details {\n        padding-left: 25px;\n    }\n}\n","",{version:3,sources:["webpack://./src/components/view/news/news.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,OAAO;AACX;;AAEA;IACI,yBAAyB;IACzB,cAAc;;IAEd,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB,WAAW;;IAEX,eAAe;IACf,eAAe;IACf,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;AACpB;AACA;IACI,mBAAmB;IACnB,aAAa;IACb,YAAY;IACZ,aAAa;IACb,uCAAuC;AAC3C;;AAEA;IACI;QACI,wBAAwB;IAC5B;IACA;QACI,wBAAwB;IAC5B;IACA;QACI,4BAA4B;IAChC;IACA;QACI,wBAAwB;IAC5B;AACJ;AACA;IACI;QACI,eAAe;QACf,eAAe;IACnB;AACJ;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;IACjB,mBAAmB;IACnB,mBAAmB;IACnB,WAAW;IACX,gBAAgB;IAChB,8BAA8B;IAC9B,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;IACP,yDAAqE;IACrE,sBAAsB;IACtB,2BAA2B;IAC3B,0BAA0B;AAC9B;AACA;IACI,iBAAiB;AACrB;;AAEA;;IAEI,YAAY;IACZ,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,SAAS;IACT,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,8BAA8B;IAC9B,WAAW;IACX,aAAa;IACb,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,cAAc;IACd,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,yBAAyB;IACzB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,kBAAkB;IAClB,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,UAAU;IACV,sBAAsB;IACtB,qCAAqC;AACzC;;AAEA;IACI,gBAAgB;IAChB,UAAU;AACd;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,WAAW;IACX,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,QAAQ;AACZ;;AAEA;IACI;QACI,mBAAmB;QACnB,gBAAgB;IACpB;;IAEA;QACI,eAAe;QACf,YAAY;IAChB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,+BAA+B;QAC/B,uBAAuB;QACvB,WAAW;QACX,mBAAmB;QACnB,WAAW;QACX,kBAAkB;QAClB,WAAW;QACX,MAAM;QACN,SAAS;QACT,WAAW;IACf;;IAEA;QACI,2BAA2B;IAC/B;;IAEA;QACI,aAAa;QACb,YAAY;QACZ,6BAA6B;QAC7B,qBAAqB;IACzB;;IAEA;QACI,kBAAkB;IACtB;AACJ",sourcesContent:[".news {\n    padding: 0 1rem;\n    flex: 1;\n}\n\n.news .news__placeholder {\n    text-transform: uppercase;\n    color: #a2a2a2;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n\n    font-size: 5rem;\n    padding: 4rem 0;\n    height: 100%;\n    text-align: center;\n    transition: 0.5s;\n}\n.arrow__up {\n    /* fill: #0097e2; */\n    fill: #a2a2a2;\n    width: 10rem;\n    height: 10rem;\n    animation: placeholder_anim 3s infinite;\n}\n\n@keyframes placeholder_anim {\n    0% {\n        transform: translateY(0);\n    }\n    65% {\n        transform: translateY(0);\n    }\n    70% {\n        transform: translateY(-3rem);\n    }\n    100% {\n        transform: translateY(0);\n    }\n}\n@media screen and (max-width: 460px) {\n    .news .news__placeholder {\n        padding: 1rem 0;\n        font-size: 2rem;\n    }\n}\n.news__item {\n    display: flex;\n    flex-direction: column;\n    margin: 1rem auto;\n    margin-bottom: 1.6%;\n    background: #f5f5f5;\n    color: #333;\n    line-height: 1.4;\n    font-family: Arial, sans-serif;\n    border-radius: 5px;\n    overflow: hidden;\n}\n\n.news__item:hover .news__meta-photo {\n    transform: scale(1.3) rotate(3deg);\n}\n\n.news__item .news__meta {\n    position: relative;\n    height: 200px;\n}\n\n.news__item .news__meta-photo {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-image: url('../../../assets/images/news_placeholder.webp');\n    background-size: cover;\n    background-position: center;\n    transition: transform 0.2s;\n}\n.news__meta-photo img {\n    object-fit: cover;\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n    margin: auto;\n    padding: 0;\n    list-style: none;\n}\n\n.news__item .news__meta-details {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: -120%;\n    margin: auto;\n    transition: left 0.2s;\n    background: rgba(0, 0, 0, 0.6);\n    color: #fff;\n    padding: 10px;\n    width: 100%;\n    font-size: 0.9rem;\n}\n\n.news__item .news__description {\n    padding: 1.5rem;\n    background: #d9d9d9;\n    position: relative;\n    z-index: 1;\n}\n\n.news__item .news__description h2 {\n    line-height: 1;\n    margin: 0;\n    font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n    font-size: 1rem;\n    font-weight: 300;\n    text-transform: uppercase;\n    color: #a2a2a2;\n    margin-top: 5px;\n}\n\n.news__item .news__description .news__read-more {\n    text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n    color: #f16110;\n    display: inline-block;\n    position: relative;\n    text-decoration: none;\n    font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n    content: '→';\n    margin-left: -10px;\n    opacity: 0;\n    vertical-align: middle;\n    transition: margin 0.3s, opacity 0.3s;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n    margin-left: 5px;\n    opacity: 1;\n}\n\n.news__item p {\n    margin: 1rem 0 0;\n}\n\n.news__item p:first-of-type {\n    margin-top: 1.25rem;\n    position: relative;\n}\n\n.news__item p:first-of-type:before {\n    content: '';\n    position: absolute;\n    height: 5px;\n    background: #f16110;\n    width: 35px;\n    top: -0.75rem;\n    border-radius: 3px;\n}\n\n.news__item:hover .news__meta-details {\n    left: 0%;\n}\n\n@media (min-width: 640px) {\n    .news__item {\n        flex-direction: row;\n        max-width: 700px;\n    }\n\n    .news__item .news__meta {\n        flex-basis: 40%;\n        height: auto;\n    }\n\n    .news__item .news__description {\n        flex-basis: 60%;\n    }\n\n    .news__item .news__description:before {\n        -webkit-transform: skewX(-3deg);\n        transform: skewX(-3deg);\n        content: '';\n        background: #f5f5f5;\n        width: 24px;\n        position: absolute;\n        left: -10px;\n        top: 0;\n        bottom: 0;\n        z-index: -1;\n    }\n\n    .news__item.alt {\n        flex-direction: row-reverse;\n    }\n\n    .news__item.alt .news__description:before {\n        left: inherit;\n        right: -10px;\n        -webkit-transform: skew(3deg);\n        transform: skew(3deg);\n    }\n\n    .news__item.alt .news__meta-details {\n        padding-left: 25px;\n    }\n}\n"],sourceRoot:""}]);const m=l},501:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),o=t.n(r),i=t(645),A=t.n(i)()(o());A.push([n.id,".sources {\n    display: flex;\n    flex-wrap: nowrap;\n    width: 100%;\n    height: 120px;\n    overflow: auto;\n    background-color: #555555;\n    align-items: center;\n    font: 400 1em 'Montserrat', sans-serif;\n}\n\n.source__item {\n    background: none;\n    border: 2px solid white;\n    font: inherit;\n    line-height: 1;\n    margin: 0.5em;\n    padding: 1em 2em;\n    color: white;\n    transition: 0.25s;\n    cursor: pointer;\n}\n\n.source__item:hover,\n.source__item:focus {\n    border-color: #f16110;\n    /* color: #69db7e; */\n    color: #f16110;\n    border-radius: 0.5rem;\n    box-shadow: 0 0.5em 0.5em -0.4em #f16110;\n    transform: translateY(-0.25em);\n}\n\n.source__item-name {\n    font-weight: 400;\n    white-space: nowrap;\n}\n","",{version:3,sources:["webpack://./src/components/view/sources/sources.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,iBAAiB;IACjB,WAAW;IACX,aAAa;IACb,cAAc;IACd,yBAAyB;IACzB,mBAAmB;IACnB,sCAAsC;AAC1C;;AAEA;IACI,gBAAgB;IAChB,uBAAuB;IACvB,aAAa;IACb,cAAc;IACd,aAAa;IACb,gBAAgB;IAChB,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;;IAEI,qBAAqB;IACrB,oBAAoB;IACpB,cAAc;IACd,qBAAqB;IACrB,wCAAwC;IACxC,8BAA8B;AAClC;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB",sourcesContent:[".sources {\n    display: flex;\n    flex-wrap: nowrap;\n    width: 100%;\n    height: 120px;\n    overflow: auto;\n    background-color: #555555;\n    align-items: center;\n    font: 400 1em 'Montserrat', sans-serif;\n}\n\n.source__item {\n    background: none;\n    border: 2px solid white;\n    font: inherit;\n    line-height: 1;\n    margin: 0.5em;\n    padding: 1em 2em;\n    color: white;\n    transition: 0.25s;\n    cursor: pointer;\n}\n\n.source__item:hover,\n.source__item:focus {\n    border-color: #f16110;\n    /* color: #69db7e; */\n    color: #f16110;\n    border-radius: 0.5rem;\n    box-shadow: 0 0.5em 0.5em -0.4em #f16110;\n    transform: translateY(-0.25em);\n}\n\n.source__item-name {\n    font-weight: 400;\n    white-space: nowrap;\n}\n"],sourceRoot:""}]);const s=A},767:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),o=t.n(r),i=t(645),A=t.n(i)()(o());A.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap);"]),A.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Montserrat:wght@400;500&display=swap);"]),A.push([n.id,"html {\n    height: 100%;\n}\nbody {\n    color: #000;\n    /* background: #17181c; */\n    background: #f5f5f5;\n    font-family: 'Bebas Neue', cursive;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\nheader {\n    padding: 10px 30px;\n}\nmain {\n    flex: 1 0 auto;\n}\n\nheader h1 {\n    font-size: 40px;\n    font-weight: 400;\n    text-transform: uppercase;\n}\nheader h1 .second__title {\n    color: #f16110;\n}\n\nheader .header__link {\n    color: #000;\n    text-decoration: none;\n}\n\nfooter {\n    height: 100px;\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-wrap: wrap;\n    gap: 1rem;\n    padding: 0 0.5rem 1rem;\n}\nfooter .copyright {\n    font-size: 14px;\n    color: #333;\n    text-align: center;\n}\nfooter .copyright a {\n    color: #444;\n}\nfooter .copyright a:hover {\n    color: #555;\n}\nfooter .copyright:before {\n    content: '©';\n}\n\n.footer__link:hover > .github,\n.footer__link:hover > .rsschool {\n    transition: 1s;\n    fill: green;\n}\n\nfooter .footer__link svg {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 8rem;\n    height: 4rem;\n    fill: #f16110;\n}\n\nfooter .footer__link .github {\n    width: 3rem;\n    height: 3rem;\n}\n","",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"AAEA;IACI,YAAY;AAChB;AACA;IACI,WAAW;IACX,yBAAyB;IACzB,mBAAmB;IACnB,kCAAkC;IAClC,UAAU;IACV,SAAS;IACT,aAAa;IACb,sBAAsB;IACtB,YAAY;AAChB;;AAEA;IACI,kBAAkB;AACtB;AACA;IACI,cAAc;AAClB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,yBAAyB;AAC7B;AACA;IACI,cAAc;AAClB;;AAEA;IACI,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,eAAe;IACf,SAAS;IACT,sBAAsB;AAC1B;AACA;IACI,eAAe;IACf,WAAW;IACX,kBAAkB;AACtB;AACA;IACI,WAAW;AACf;AACA;IACI,WAAW;AACf;AACA;IACI,YAAY;AAChB;;AAEA;;IAEI,cAAc;IACd,WAAW;AACf;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,WAAW;IACX,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Montserrat:wght@400;500&display=swap');\nhtml {\n    height: 100%;\n}\nbody {\n    color: #000;\n    /* background: #17181c; */\n    background: #f5f5f5;\n    font-family: 'Bebas Neue', cursive;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\nheader {\n    padding: 10px 30px;\n}\nmain {\n    flex: 1 0 auto;\n}\n\nheader h1 {\n    font-size: 40px;\n    font-weight: 400;\n    text-transform: uppercase;\n}\nheader h1 .second__title {\n    color: #f16110;\n}\n\nheader .header__link {\n    color: #000;\n    text-decoration: none;\n}\n\nfooter {\n    height: 100px;\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    flex-wrap: wrap;\n    gap: 1rem;\n    padding: 0 0.5rem 1rem;\n}\nfooter .copyright {\n    font-size: 14px;\n    color: #333;\n    text-align: center;\n}\nfooter .copyright a {\n    color: #444;\n}\nfooter .copyright a:hover {\n    color: #555;\n}\nfooter .copyright:before {\n    content: '©';\n}\n\n.footer__link:hover > .github,\n.footer__link:hover > .rsschool {\n    transition: 1s;\n    fill: green;\n}\n\nfooter .footer__link svg {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 8rem;\n    height: 4rem;\n    fill: #f16110;\n}\n\nfooter .footer__link .github {\n    width: 3rem;\n    height: 3rem;\n}\n"],sourceRoot:""}]);const s=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var A=this[i][0];null!=A&&(o[A]=!0)}for(var s=0;s<n.length;s++){var a=[].concat(n[s]);r&&o[a[0]]||(t&&(a[2]?a[2]="".concat(t," and ").concat(a[2]):a[2]=t),e.push(a))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var r,o,i=[],A=!0,s=!1;try{for(t=t.call(n);!(A=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);A=!0);}catch(n){s=!0,o=n}finally{try{A||null==t.return||t.return()}finally{if(s)throw o}}return i}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],A=o[3];if(!A)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(A)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(a," */"),l=A.sources.map((function(n){return"/*# sourceURL=".concat(A.sourceRoot||"").concat(n," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},667:n=>{n.exports=function(n,e){return e||(e={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},379:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),i=[];function A(n){for(var e=-1,t=0;t<i.length;t++)if(i[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},r=[],o=0;o<n.length;o++){var s=n[o],a=e.base?s[0]+e.base:s[0],c=t[a]||0,l="".concat(a," ").concat(c);t[a]=c+1;var d=A(l),m={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(i[d].references++,i[d].updater(m)):i.push({identifier:l,updater:u(m,e),references:1}),r.push(l)}return r}function a(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var A=o(n.insert||"head");if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(e)}return e}var c,l=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function d(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),A=n.childNodes;A[e]&&n.removeChild(A[e]),A.length?n.insertBefore(i,A[e]):n.appendChild(i)}}function m(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var f=null,p=0;function u(n,e){var t,r,o;if(e.singleton){var i=p++;t=f||(f=a(e)),r=d.bind(null,t,i,!1),o=d.bind(null,t,i,!0)}else t=a(e),r=m.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=A(t[r]);i[o].references--}for(var a=s(n,e),c=0;c<t.length;c++){var l=A(t[c]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}t=a}}}},136:(n,e,t)=>{n.exports=t.p+"assets/images/news_placeholder.webp"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{function n(n){if(!(n instanceof HTMLElement))throw new Error(`${n} : element null or undefined`);return n}function e(n){if(!(n instanceof HTMLTemplateElement))throw new Error(`${n} : element null or undefined`);return n}function r(n){if(!(n instanceof EventTarget))throw new Error(`${n} : element null or undefined`);return HTMLElement,n}var o;!function(n){n[n.BadRequest=400]="BadRequest",n[n.Unauthorized=401]="Unauthorized",n[n.PaymentRequired=402]="PaymentRequired",n[n.Forbidden=403]="Forbidden",n[n.NotFound=404]="NotFound"}(o||(o={}));const i=class{constructor(n,e){this.baseLink=n,this.options=e}getResp({endpoint:n,options:e={}},t=(()=>{console.error("No callback for GET response")})){this.load("GET",n,t,e)}errorHandler(n){if(!n.ok)throw n.status!==o.Unauthorized&&n.status!==o.NotFound||console.log(`Sorry, but there is ${n.status} error: ${n.statusText}`),Error(n.statusText);return n}makeUrl(n,e){const t=Object.assign(Object.assign({},this.options),n);let r=`${this.baseLink}${e}?`;return Object.keys(t).forEach((n=>{r+=`${n}=${t[n]}&`})),r.slice(0,-1)}load(n,e,t,r={}){fetch(this.makeUrl(r,e),{method:n}).then(this.errorHandler).then((n=>n.json())).then((n=>t(n))).catch((n=>console.error(n)))}},A=class extends i{constructor(){super("https://nodenews.up.railway.app/",{apiKey:"1d57e164c9ec47d7bd0c099d627af853"})}},s=class extends A{getSources(n){super.getResp({endpoint:"sources"},n)}getNews(e,t){let o=n(r(e.target));const i=n(r(e.currentTarget));for(;o!==i;){if(o.classList.contains("source__item")){const n=o.getAttribute("data-source-id");return void(i.getAttribute("data-source")!==n&&(n&&i.setAttribute("data-source",n),super.getResp({endpoint:"everything",options:{sources:n}},t)))}o=n(o.parentNode)}}};var a=t(379),c=t.n(a),l=t(669);c()(l.Z,{insert:"head",singleton:!1}),l.Z.locals;var d=t(501);c()(d.Z,{insert:"head",singleton:!1}),d.Z.locals;class m{constructor(){this.news=new class{draw(t){const r=t.length>=10?t.filter(((n,e)=>e<10)):t,o=document.createDocumentFragment(),i=e(document.querySelector("#newsItemTemp"));r.forEach(((e,t)=>{const r=i.content.cloneNode(!0);r instanceof DocumentFragment&&(t%2&&n(r.querySelector(".news__item")).classList.add("alt"),n(r.querySelector(".news__meta-photo")).style.backgroundImage=`url(${e.urlToImage||"assets/images/news_placeholder.webp"})`,n(r.querySelector(".news__meta-author")).textContent=e.author||e.source.name,n(r.querySelector(".news__meta-date")).textContent=e.publishedAt.slice(0,10).split("-").reverse().join("-"),n(r.querySelector(".news__description-title")).textContent=e.title,n(r.querySelector(".news__description-source")).textContent=e.source.name,n(r.querySelector(".news__description-content")).textContent=e.description,n(r.querySelector(".news__read-more a")).setAttribute("href",e.url),o.append(r))})),n(document.querySelector(".news")).innerHTML="",n(document.querySelector(".news")).appendChild(o)}},this.sources=new class{draw(t){const r=document.createDocumentFragment(),o=e(document.querySelector("#sourceItemTemp"));t.forEach((e=>{const t=o.content.cloneNode(!0);t&&t instanceof DocumentFragment&&(n(t.querySelector(".source__item-name")).textContent=e.name,n(t.querySelector(".source__item")).setAttribute("data-source-id",e.id),r.append(t))})),n(document.querySelector(".sources")).append(r)}}}drawNews(n){const e=(null==n?void 0:n.articles)?null==n?void 0:n.articles:[];this.news.draw(e)}drawSources(n){const e=(null==n?void 0:n.sources)?null==n?void 0:n.sources:[];this.sources.draw(e)}}var f=t(767);c()(f.Z,{insert:"head",singleton:!1}),f.Z.locals,(new class{constructor(){this.controller=new s,this.view=new m}start(){n(document.querySelector(".sources")).addEventListener("click",(n=>this.controller.getNews(n,(n=>this.view.drawNews(n))))),this.controller.getSources((n=>this.view.drawSources(n)))}}).start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,